# -*- coding: utf-8 -*-
"""Rizki Alvian - Proyek Pertama Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GB0rpziJFQX4lq9qrvGeYRYM6NM734Hf

**PREDIKSI HARGA SAHAM BANK RAKYAT INDONESIA (BRI)**

Oleh: Rizki Alvian

Pada proyek pertama predictive analytics, saya akan melakukan prediksi pada harga saham PT Bank Rakyat Indonesia Tbk (periode data digunakan adalah 2 Juli 2018 sampai 28 Juni 2023) menggunakan algoritma Long Short Term Memory (LSTM).

Data diproleh menggunakan tautan berikut: https://finance.yahoo.com/quote/BBRI.JK/

**Import Library yang Dibutuhkan**

Pertama-tama adalah melakukan iport library yang akan digunakan pada proses prediksi harga saham.
"""

# Import library
import math
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

"""**Upload Data Yang Akan Digunakan**

Upload dataset yang digunakan kedalam google colab.
"""

# Upload data
from google.colab import files
uploaded = files.upload()

# Memasukan data csv kedalam variabel dataFrame
import io
dataFrame = pd.read_csv(io.BytesIO(uploaded['BBRI.JK.csv']))

# Menampilkan dataFrame
print(dataFrame.head())
print(dataFrame.tail())

"""**Exploratory Data Analysis (EDA) dan Visualisasi Data**

Dari tahap proses Exploratory Data Analysis akan diperoleh beberapa insight diantaranya adalah:
*   Jumlah baris data adalah 1239 dengan jumlah  kolom sebanyak 7.
*   Kolom Date bertipe object, sedangkan untuk kolom Open, High, Low, Close, Adj Close, dan Volume bertipe float64.
*   Tidak terdapat Null, yang berarti semua data terisi.

Sedangkan dari tahap Visualisasi Data dapat dilihat pergerakan harga penutupan sahamnya. Disini saya menggunakan data Close atau data harga penutupan saham pada hari itu.
"""

# Exploratory data analysis
print(dataFrame.shape)
print(dataFrame.info())
print(dataFrame.isnull())

# Visualisasi Data
plt.figure(figsize = (20, 10))
plt.plot(dataFrame['Close'])
plt.title('PT Bank Rakyat Indonesia Tbk (2 Jul 2018 - 28 Jun 2023)',  fontsize = 24)
plt.xlabel('Days')
plt.ylabel('Close Price IDR')
plt.show()

"""**Mengambil Kolom Close dan Fungsi Split Dataset**

Pada tahapan ini didefinisikan fungsi untuk mengambil kolom Close pada dataFrame, yang akan digunakan dalam proses prediksi harga adalah data penutupan saham, sehingga yang dipilih adalah kolom Close.


Kemudian data diubah menjadi tipe array dan dibagi menjadi data training dan data testing dengan perbandingan 80:20. Dari pembagian ini diperoleh data training sebanyak 992 data.
"""

# Mengambil kolom Close
df = dataFrame.filter(['Close'])

# Convert data kedalam numpy array
dataset = df.values

# Membagi data training dan testing
training_data_len = math.ceil(len(dataset) * .80)
training_data_len

"""**Scaling Dataset**

Data di-scaling kedalam rentang antara 0 hingga 1.
"""

# Scaling the dataset
scaler = MinMaxScaler(feature_range = (0, 1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

"""**Membuat Variabel X Train, Y Train, dan Fungsi Pembagi Data**

Kita definisikan variabel kosong bernama x_train dan y_train, variabel ini akan diisi oleh pembagian data yang akan dilakukan menggunakan data yang sudah di-scaling sebelumnya.

Kemudian data akan dibagi menjadi 60 data x_training yang dimulai dari data dengan index 0 hingga 59 dan 1 data y_train yang diambil dari indeks ke 60. Data dengan indeks 60 tersebut merupakan target dari prediksi setiap 60 data awal yang didefinisikan pada fungsi for di baris kode ke 13. Pembagian selanjutnya adalah data dengan indeks 1 hingga 60 dan data dengan indeks 61, dan begitu seterusnya.
"""

# Membuat dataset training
train_data = scaled_data[0:training_data_len, :]

# Membuay variabel x_train dan y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i <= 61:
    print(x_train)
    print(y_train)

"""**Fungsi Mengubah Menjadi Array dan Fungsi Reshape**

Mendefinisikan fungsi untuk reshape data. Input dari model LSTM mengaruskan untuk array 3 dimensi berupa (number of samples, number of time steps, number of features). Data yang dimiliki masih berbentuk 2 dimensi, jadi harus dilakukan reshaping.
"""

# Convert x_train dan y_train menjadi numpy array
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the dataset
x_train=np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

"""**Membangun Model dan Fungsi Compile**

* Pertama, manfaatkan library keras.models untuk memanggil fungsi Sequential(), untuk menyiapkan basis model LSTM yang disimpan pada variabel model.
* Kemudian manfaatkan library keras.layer untuk mengkonfigurasikan layer
pada model LSTM, disini kita gunakan konfigurasi 3 layer dengan jumlah neuron
50, 50, dan 25.
* Setelah model selesai dibangun, model akan di-compile dan ditambahkan fungsi optimizer adam.
* Loss function yang digunakan adalah mean_square_error.
* Pada model, dilakukan proses training dengan hyperparameter disetel batch_size = 1 dan epoch = 5.
"""

# Membangun Model LSTM
model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))

# Compile Model LSTM
model.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = 'mae')

# Training Model LSTM
model.fit(x_train, y_train, batch_size = 1, epochs = 5)

"""**Membuat Variabel X Test, Y Test, dan Fungsi Pembagi Data**

Disini kita akan medefinisikan variabel kosong bernama x_test dan y_test, yang akan diisi oleh pembagian data yang akan dilakukan menggunakan data yang sudah dibagi dan di-scaling sebelumnya.

Kemudian data akan dibagi menjadi 60 data x_test yang dimulai dari data dengan index 0 hingga 59 (data_testing) dan 1 data y_test (data_testing) yang diambil dari indeks ke 60.

Data dengan indeks 60 tersebut merupakan target dari prediksi setiap 60 data awal didefinisikan pada fungsi for di baris kode ke 9.

Pembagian selanjutnya adalah data dengan indeks 1 hingga 60 dan data dengan indeks 61, dan begitu seterusnya.
"""

# Membuat dataset testing
test_data = scaled_data[training_data_len - 60:, :]

# Membuat dataset x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

"""**Proses Prediksi**

Input dari model LSTM mengaruskan untuk array 3 dimensi berupa (number of samples, number of time steps, number of features).

Data yang dimiliki masih berbentuk 2 dimensi, jadi harus dilakukan reshaping kemudian data akan dilakukan prediksi. Setelah hasil prediksi didapatkan akan
diterapkan fungsi inverse untuk membalikkan harga seperti semula.
"""

# Convert data kedalam numpy array
x_test = np.array(x_test)

# Reshape dataset
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
x_test.shape

# Memprediksi menggunakan model LSTM
lstm_prediction = model.predict(x_test)

# Melakukan invers data yang sebelumnya di-scalling
lstm_prediction = scaler.inverse_transform(lstm_prediction)

"""**Visualisasi Data**

Berikut adalah visualisasi dari hasil prediksi yang dilakukan menggunakan algoritma LSTM.
"""

# Plot data
train = df[:training_data_len]
valid = df[training_data_len:]
valid['Predictions'] = lstm_prediction

# Visualisasi data prediksi
plt.figure(figsize = (20, 10))
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.title('PT Bank Rakyat Indonesia Tbk Prediction')
plt.xlabel('Date', fontsize = 10)
plt.ylabel('Close Price IDR', fontsize = 10)
plt.legend(['Train', 'Validation', 'Predictions'], loc = 'best', fontsize = 24)
plt.show()